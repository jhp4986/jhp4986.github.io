{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/React","result":{"pageContext":{"currentCategory":"React","categories":["All","React","AWS","Git","HTML&CSS"],"edges":[{"node":{"id":"6a9d2c98-2cd6-5ee4-869d-1a7af1afbe5f","excerpt":"React-Props  \n\nprops 란 컴포넌트 속성값을 의미한다.\n\n부모 컴포넌트로부터 전달받은 데이터를 지니고 있는 객체이다. props 를 이용해서 전달하고자 하는 어떤 값이든 ( 변수, 함수, state값, event handler 등 ..) 모두 자식 컴포넌트에 전달할 수 있다.\n  사용  언제 props 가 필요 할까 ? 부모 컴포넌트에서의 데이터 잔달 \n\n위 컴포넌트에서 ‘햄버거’ 라는 문자열을 food 라는 변수에 담아 관리하고 있다. \nfood 라는 변수를 사용해 화면에 표현할 수 있다.\n \n\n먼저 child 컴포넌트를 만들고 부모컴포넌트에서 child 컴포넌트를 import 한다. \nchild 컴포넌트를 return 문 내에 넣어준다. 여기서 집중해야 할 것은 “어떤 데이터를 자식 컴포넌트로 보내주어야 하는가 ” 이다.  위 사진에서 부모 컴포넌트에는 이미 선언되어 있고, 자식 컴포넌트 에서도 필요로 하는 데이터는 바로 food 라는 변수 이다.  보내주고자 하…","fields":{"slug":"/react-blog/props/"},"frontmatter":{"categories":"React","title":"React-Props","date":"April 22, 2023"}},"next":{"fields":{"slug":"/react-blog/state/"}},"previous":null},{"node":{"id":"68eb5d9a-ab74-5746-ad24-ab745ab19ddd","excerpt":"React-state, setState    state  state 를 사용하기 위해 ‘useState’ 함수를 import 한 후에 사용해야 한다. useState 함수는 ‘Hook’ 의 일종으로 내장되어 있는 react로 부터 가져올 수 있다.\n\nimport 한 useState Hook 은 사용 규칙에 따라 컴포넌트 선언문 내에서 최상위 블록 내에서 사용 하면 된다. \n(return 위)\nuseState Hook 을 사용할 때는 useState Hook 으로 부터 반환 되는 값을 ‘구조 분해 할당’ 을 통해 각각의 변수에 담아서 사용 한다.\n  [ state, setState ]  첫 번째 요소 (state) 는 우리가 동적으로 관리하고자 하는 상태값이다. 해당 상태의 초기값은 useState hook 을 호출 할때 인자로 (defaultValue) 로 넘겨준다. 두 번째 요소 ( setState function ) 는 첫 번째 요소인 상태값을 업데이트 하는 함수 이다. sta…","fields":{"slug":"/react-blog/state/"},"frontmatter":{"categories":"React","title":"React-state, setState","date":"April 21, 2023"}},"next":{"fields":{"slug":"/react-blog/hook/"}},"previous":{"fields":{"slug":"/react-blog/props/"}}},{"node":{"id":"0502540f-ff1f-5238-bf69-437e39abb97f","excerpt":"React-Hook   Hook 은 클래스 컴포넌트에서만 사용할 수 있었던 state (상태) 관리와 lifecycle 관리 기능을 함수 컴포넌트에서도 사용 할 수 있도록 연동 (hook in) 해주는 함수를 의미한다. 이러한 hook 들의 모음을 Hooks 라고 한다. \nReact 는 useState 와 같은 내장 hook 을 몇 가지 제공하고 있으며, 컴포넌트 간에 상태 관련 로직을 재사용하기 위해 Hook 을 직접 만드는것 ( custom hook ) 도 가능 하다. Hook은 클래스 컴포넌트 안에서는 동작하지 않으며 오로지 함수 컴포넌트 내에서만 사용해야 한다.\n  사용 규칙 이 두가지 경우를 제외한 곳에서는 호출할 수 없다. 클래스 컴포넌트의 메서드 뿐만 아니라 일반 JavaScript 함수에서도 사용할 수 없다.\n\nHook 은 항상 함수 컴포넌트 내의 최상위 ( at the top level ) 에서만 호출해야 한다. 이러한 규칙을 따르다면 해당 컴포넌트가 랜더링 될 때…","fields":{"slug":"/react-blog/hook/"},"frontmatter":{"categories":"React","title":"React-Hook","date":"April 21, 2023"}},"next":{"fields":{"slug":"/react-blog/router/"}},"previous":{"fields":{"slug":"/react-blog/state/"}}},{"node":{"id":"79d704f2-c049-56fe-b733-cc86afb24ad7","excerpt":"React-Router  Router.js 에 경로지정, 지정된 경로대로 컴포넌트를 화면에 그리는 방법 \n현재 사용하고 작업 하고있는 에디터 (VScode, 등…) 에서 터미널을 오픈 한 다음 설치가 되었다면 npm install react-router-dom 을 입력해주면 설치 할 수 있다.  \n\n설치가 되었다면 src 폴더에 index.js 파일이 위치해 있는 같은곳에 Router.js 파일 하나를 만들어 준다.\n\nRouter.js 파일을 만들어야 하는 이유는 sign up 띄우거나 log in 을 띄워야한다면 index.js 에서 매번 랜더링 할 컴포넌트를 매번 수정해야 하고 컴포넌트 별로 경로 설정 또한 할 수 가 없다.\n Router.js 파일은 다른 파일에서 import 하기 때문에 export 가 필요하다. \n만들어 놓은 컴포넌트에 대해 간략하게 설명하면 BrowserRouter 컴포넌트는 경로 변경에 대해 여러 편의기능을 제공해주는 컴포넌트인데 대표적으로 페이지가 새…","fields":{"slug":"/react-blog/router/"},"frontmatter":{"categories":"React","title":"React-Router","date":"April 20, 2023"}},"next":{"fields":{"slug":"/react-blog/intro/"}},"previous":{"fields":{"slug":"/react-blog/hook/"}}},{"node":{"id":"9a24676c-e4ca-5da3-be6f-cd33b7590c89","excerpt":"React  meta 에서 개발한 오픈 소스 자바스크립트 라이브러리. Web Application 의 발전 우리가 사용하는 사이트에는 보이는 것 (UI: User Interface) 과 할 수 있는 것 (UX: User Experience) 이 많다.\n뿐만 아니라 문서 작성, 쇼핑, SNS, 게임 등의 기능을 웹 브라우저에서 이용할 수 있다. 이처럼 사용자가 별도의 응용 소프트웨어 (어플리케이션) 를 설치하지 않아도 웹 브라우저를 통해 응용 소프트웨어의 기능을 이용 할 수 있도록 만든 웹 서비스를 웹 어플리케이션 ( Web Application ) 이라고 한다. 이러한 이유로, 현대의 대다수 웹 서비스는 웹 페이지라는 단어보다 웹 어플리케이션이라는 단어가 많이 사용 되고 있다.\n\n\n과거의 웹 페이지는 UI 가 단순하고 검색어 및 회원정보 입력, 항목 클릭 등 비교적 상호작용이 적었던거에 비해 현재의 웹 어플리케이션은 동적이고 다양한 UI 를 가지며 카테고리 hover 이벤트, 좋아…","fields":{"slug":"/react-blog/intro/"},"frontmatter":{"categories":"React","title":"React-intro","date":"April 20, 2023"}},"next":{"fields":{"slug":"/react-blog/sideEffect/"}},"previous":{"fields":{"slug":"/react-blog/router/"}}},{"node":{"id":"3086ab98-24de-56d9-bd06-a8d147431112","excerpt":"React 함수 컴포넌트의 side effect  함수 컴포넌트에서의 input 과 output 리액트에서 렌더링이랑 state 랑 proprs 를 기반으로 UI를 그려내는 행위 이다. 리액트에서 UI 를 컴포넌트 단위로 구성하고, 그 컴포넌트는 함수 컴포넌트를 이용해서 만들 수 있다.(함수의 본질은 input 을 바다서 output을 출력 하는것)\n  리액트의 함수 컴포넌트 본질은 무엇일까 ?  함수 컴포넌트는 state 그리고 props 를 통해서 JSX 를 만들어내는 것이 본질적인 역할이다.\n즉, 함수 컴포넌트의 input 은 state 그리고 props 라고 할 수 있고, output 은 JSX 라고 할 수 있다. 이를 식으로 표현 하면, (state,props) => JSX\n  (엄밀히 말하면 리액트의 함수 컴포넌트는 인자로 props 만을 받고 state는 인자로 받는것이 아니라 useState hook 을 통해서 꺼내오지만, 개념상으로 봤을때는 state 그리고 pro…","fields":{"slug":"/react-blog/sideEffect/"},"frontmatter":{"categories":"React","title":"React-Side Effect","date":"April 20, 2023"}},"next":{"fields":{"slug":"/gatsby-github-blog/aws/"}},"previous":{"fields":{"slug":"/react-blog/intro/"}}}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}