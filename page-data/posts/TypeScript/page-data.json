{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/TypeScript","result":{"pageContext":{"currentCategory":"TypeScript","categories":["All","TypeScript","Retrospective","React","AWS","HTML&CSS","Git"],"edges":[{"node":{"id":"942c16ac-accf-56f8-9a1a-7d8ddf51b844","excerpt":"Interface 로 객체 구조를 정의하는 방법 현재 반환되는 함수에 타입이 객체 구조로 명시 되어 있다. \n복잡한 이 코드를 조금 더 나은 방법으로 바꾸기 위해 인터페이스를 사용할 수 있다. \n\n인터페이스를 사용하기 위해서는 인터페이스를 타입으로 생성하기위해 인터페이스를 만들어 주어야 한다.   완성된 인터페이스는 어플리케이션 내에서 스트링 이나 넘버처럼 타입으로 명시 되면서 사용 할 수 있다. \n인터페이스를 타입으로 사용할 때 인터페이스를 타입으로 가지는 값은 인터페이스의 구조를 그 값으로 가지도록 강제 된다. \n함수의 반환 값은 반드시 인터페이스에 정의된 property 들을 가져야 한다. \n예를 들어 return 값을 string 으로 바꾼다면, 에러가 나타나게 된다.  ” 정의된 하나의 프로퍼티가 반환값에 포함되어야 하는데 반환값에 없다 ” 라는 에러가 생기게 된다. \n그럴때는 있어도 되고 없어도 되는 property 를 나타낼수 있는 방법으로는 인터페이스에 정의된 프로퍼…","fields":{"slug":"/ts-blog/interface/"},"frontmatter":{"categories":"TypeScript","title":"TypeScript - Interface","date":"May 03, 2023"}},"next":{"fields":{"slug":"/ts-blog/타입명시/"}},"previous":null},{"node":{"id":"55b38a99-29c6-534e-95d8-37fb31f40a2f","excerpt":"타입 명시 변수를 선언할 때, 값의 타입을 명시함으로써 변수 값의 데이터 타입을 지정 하는것  Syntax 변수 이름 뒤에 : 콜론을 일력하고 콜론 뒤에 변수에 데이터 타입을 지정해 주면 된다.\n \n\n 하지만 숫자를 문자열이나 다른 데이터 타입으로 바꾸고 컴파일러를 작동 시키면 터미널에서 볼 수 있듯이 컴파일 에러를 얻게 된다. 컴파일 에러는 코드를 작성 할 때 문법을 잘 못 작성해서 컴파일 시 생기는 오류를 나타내는 것이다.  예시 함수의 파라미터 매개변수도 변수이기 때문에 타입을 지정 할 수 있다.\n 또한 함수의 결과 값 에도 타입을 명시할 수 있다. \n파라미터가 들어가는 괄호 뒤에 : 콜론을 입력하고 함수의 값에 타입을 선언할 수 있다. \n만약 함수가 아무런 값도 반환하지 않으면\n\n:void 라는 타입을 명시 할 수 있다. \n( void 란 이 함수는 아무것도 반환 하지 않는다 라는 의미를 부여 )\n \n\n만약 함수가 어떠한 특정 값을 반환하는 함수일 경우에는 void 대신 반…","fields":{"slug":"/ts-blog/타입명시/"},"frontmatter":{"categories":"TypeScript","title":"TypeScript - 타입 명시","date":"May 03, 2023"}},"next":{"fields":{"slug":"/ts-blog/타입추론/"}},"previous":{"fields":{"slug":"/ts-blog/interface/"}}},{"node":{"id":"cfd29528-e95e-5e1c-b96a-1657535f514b","excerpt":"Static Typing 타입스크립트의 가장 독특한 특징은 Static Typing 이라고 불리는 정적 타이핑 기능을 자바스크립트 언어에 제공을 한다.\n\nStatic Typing 이란 타입을 선언하고 선언된 타입에 맞는 값 만 할당 또는 반환 되어야 된다는 뜻이다.  Type Inference ( 타입 추론) 타입스크립트에서는 타입 표기가 없는 경우 코드를 읽고 분석하여 타입을 유추해낼수 있다.  👇 🙅‍♂️  👇 🙆‍♂️   예시 \n student 라는 이름을 갖고 있는 객체가 있는데 TypeScript 는 스스로 객체 속에 property 할당 값을 검사하고 어떠한 타입이 property에 할당 값으로 주어졌는지 확인을 한다. 또한 이런 할당 값의 타입을 바탕으로 객체의 property에 타입 추론을 적용 한다.\n따라서 string 이 할당 값으로 주어진 name property 를 number 로 재 할당 하려고 하면 error 메세지를 보낸다.  return 타입을 가진 functio…","fields":{"slug":"/ts-blog/타입추론/"},"frontmatter":{"categories":"TypeScript","title":"TypeScript - 타입추론 (Type Inference)","date":"May 01, 2023"}},"next":{"fields":{"slug":"/ts-blog/필수문법/"}},"previous":{"fields":{"slug":"/ts-blog/타입명시/"}}},{"node":{"id":"f369f00d-b70a-5f32-8c64-debd09293c60","excerpt":"TypeScript 란 ? 타입스크립트 ( TypeScript ) 는 자바스크립트의 슈퍼셋인 오픈소스 프로그래밍 언어이다. \n(JavaScript 대용품 같은 언어) 마이크로소프트에서 개발, 유지하고 있으며 “엄격” 한 문법을 지원한다. \n자바스크립트 엔진을 사용하면서 커다란 애플리케이션을 개발할 수 있게 설계 되었다.\n자바스크립트의 슈퍼셋이기 때문에 자바스크립트로 작성된 프로그램이 타입스크립트 프로그램으로도 동작 한다.\n 자바스크립트에서 타입 부분을 조금 업그레이드 해서 쓸 수 있는 자바스크립트 업그레이드 버전이라고 생각 하면 된다.\n TypeScript 를 쓰는 이유 자바스크립트는 다이나믹 타이핑을 제공하는 언어이기 때문에 숫자와 문자가 만났을때 숫자로 바꿔서 연산을 하게 된다. \n다이나믹 타이핑은 편리하지만 프로젝트 사이즈가 커지게 되면 오히려 단점으로 적용이 될 수 있다.\n\n코드가 길어지면 길어질수록 자유도 & 유연성은 오히려 우리에게 좋지 않다.  그래서 TypeScrip…","fields":{"slug":"/ts-blog/필수문법/"},"frontmatter":{"categories":"TypeScript","title":"TypeScript - 필수 문법","date":"May 01, 2023"}},"next":{"fields":{"slug":"/retrospective-blog/기업협업/"}},"previous":{"fields":{"slug":"/ts-blog/타입추론/"}}}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}